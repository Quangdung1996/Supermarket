@page "/add-product"
@inject NavigationManager NavigationManager
@using MediatR
@inject IMediator Mediator


<h3>Add Product</h3>
<br />
@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSumit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="category">Category</label>
            <select id="category" @bind="product.CategoryId" class="form-control">
                <option selected></option>
                @foreach (var cat in categories ?? new List<CategoryDto>())
                {
                    <option value="@cat.Id">@cat.Name</option>
                }
            </select>
        </div>


        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" @bind-Value:format="F2" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>

}


@code {
    private CreateProductCommand product;
    private IEnumerable<CategoryDto> categories;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        product = new CreateProductCommand();
        await LoadCategoriesAsync();
    }


    private async Task LoadCategoriesAsync()
    {
        var results = await Mediator.Send(new GetCategoryWithPaginationQuery());
        categories = results.Items;
    }

    private async Task OnValidSumit()
    {
        var results = await Mediator.Send(product);
        NavigationManager.NavigateTo("/products");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}
