@page "/products"

@inject NavigationManager NavigationManager
@using MediatR
@inject IMediator Mediator


<h3>Products</h3>
<br />
@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product?.Category?.Name</td>
                    <td>@product.Name</td>
                    <td>@(Math.Round(product.Price.GetValueOrDefault(), 2))</td>
                    <td>@product.Quantity</td>
                    <td>
                        <button type="button" class="btn btn-link" @onclick="@(()=>Update(product.Id))">Edit</button>
                        &nbsp;
                        <button type="button" class="btn btn-link" @onclick="@(()=>DeleteAsync(product.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Add Product</button>


@code {
    private IEnumerable<ProductDto> products;
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        var results = await Mediator.Send(new GetProductWithPaginationQuery());
        products = results.Items;
    }


    private void Update(int id)
    {
        NavigationManager.NavigateTo($"/edit-product/{id}");
    }

    private async Task DeleteAsync(int id)
    {
        var results = await Mediator.Send(new DeleteProductCommand(id));
        await LoadProductsAsync();
    }
    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/add-product");
    }
}
